var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EnlilGrids","category":"page"},{"location":"#EnlilGrids","page":"Home","title":"EnlilGrids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EnlilGrids]","category":"page"},{"location":"#EnlilGrids.gmsh_do_elements-Tuple{Any}","page":"Home","title":"EnlilGrids.gmsh_do_elements","text":"gmsh_do_elements(raw_Elements) -> NamedTuple\n\nSplit raw_Elements created by load_gmsh_file.\n\nArguments\n\nraw_Elements: data about elements in gmsh,\n\nKeywords\n\nReturns\n\nNamedTuple: one Dict{Int,String} for each dimension, entityTag => physicalTag: \nentityTag1D   :: Array{Int64,1},\nentityTag2D   :: Array{Int64,1},\nentityTag3D   :: Array{Int64,1},\nelementType1D :: Array{Int64,1},\nelementType2D :: Array{Int64,1},\nelementType3D :: Array{Int64,1},\nelementTag1D  :: Array{Int64,1},\nelementTag2D  :: Array{Int64,1},\nelementTag3D  :: Array{Int64,1},\nnodeTags1D    :: Array{Array{Int64,1},1},\nnodeTags2D    :: Array{Array{Int64,1},1},\nnodeTags3D    :: Array{Array{Int64,1},1}.\n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.gmsh_do_entities-Tuple{Any}","page":"Home","title":"EnlilGrids.gmsh_do_entities","text":"gmsh_do_entities(raw_Entities) -> NamedTuple\n\nSplit raw_Entities created by load_gmsh_file in to one Dict for each type of entity. Operates with only one physicalTag per entity.\n\nArguments\n\nraw_Entities: data about entities in gmsh,\n\nKeywords\n\nReturns\n\nNamedTuple: one Dict{Int,String} for each dimension, entityTag => physicalTag: \npointTagtoPhysicalTag,\ncurveTagtoPhysicalTag,\nsurfaceTagtoPhysicalTag,\nvolumeTagtoPhysicalTag.\n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.gmsh_do_nodes-Tuple{Any}","page":"Home","title":"EnlilGrids.gmsh_do_nodes","text":"gmsh_do_nodes(raw_Nodes) -> NamedTuple\n\nSplit raw_Nodes created by load_gmsh_file. Operates with only non parametric curves.\n\nArguments\n\nraw_Nodes: data about nodes in gmsh,\n\nKeywords\n\nReturns\n\nNamedTuple: one Dict{Int,String} for each dimension, entityTag => physicalTag: \nnodeTag::Array{Int64,1},\nvx::Array{Float64,1},\nvy::Array{Float64,1},\nvz::Array{Float64,1}.\n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.gmsh_do_physicalnames-Tuple{Any}","page":"Home","title":"EnlilGrids.gmsh_do_physicalnames","text":"gmsh_do_physicalnames(raw_PhysicalNames) -> NamedTuple\n\nSplit raw_PhysicalNames created by load_gmsh_file in to one Dict for each dimension.\n\nArguments\n\nraw_PhysicalNames: data about physical names in gmsh,\n\nKeywords\n\nReturns\n\nNamedTuple: one Dict{Int,String} for each dimension, physicalTag => Name: \nphysicalTag1DtoName - maps physicalTag to Name for 1D objects,\nphysicalTag2DtoName - maps physicalTag to Name for 2D objects,\nphysicalTag3DtoName - maps physicalTag to Name for 3D objects,\n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.import_gmsh-Tuple{AbstractString}","page":"Home","title":"EnlilGrids.import_gmsh","text":"import MeshCore ird0.\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.load_gmsh-Tuple{AbstractString}","page":"Home","title":"EnlilGrids.load_gmsh","text":"gmsh v 4.1\n\n\n\n\n\n","category":"method"},{"location":"#EnlilGrids.load_gmsh_file-Tuple{AbstractString}","page":"Home","title":"EnlilGrids.load_gmsh_file","text":"load_gmsh_file(filename::AbstractString) -> NamedTuple\n\nLoads the filename into separete arrays according to the gmsh file format style in ASCII mode.\n\nArguments\n\nfilename::AbstractString: name of the file to be loaded,\n\nKeywords\n\nReturns\n\nNamedTuple: gmsh file is separated into the arrays of substring:\nmsh_version - constains infomartion about gmsh file version,\nmsh_PhysicalNames - constains data about physical objects,\nmsh_Entities - constains data about entities,\nmsh_Nodes - constains data about nodes including coordinates,\nmsh_Elements - constains data about elements,\n\nThrows\n\nError: file with name filename does not exists,\nError: file with name filename is saved in binary mode.\n\n\n\n\n\n","category":"method"}]
}
